import { Drawable } from "./Drawable";
import { CanvasContext2D, CanvasColor } from "./CanvasContext2D";
import { CanvasTableTouchEvent } from './CanvasTableTouchEvent';
export interface ScrollViewConfig {
    buttonHoverColor?: CanvasColor;
    buttonColor?: CanvasColor;
    backgroundColor?: CanvasColor;
}
export declare class ScrollView {
    private drawable;
    private askForExtentedMouseMoveAndMaouseUp;
    private askForNormalMouseMoveAndMaouseUp;
    private canvasWidth;
    private canvasHeight;
    private context;
    private height?;
    private width?;
    private r;
    private timeout?;
    private hasScrollBarY;
    private scrollBarThumbDownY;
    private isOverScrollUpY;
    private isOverScrollDownY;
    private isOverScollThumbY;
    private posYvalue;
    private scrollBarThumbMinY;
    private scrollBarThumbMaxY;
    private scrollBarPosMaxY;
    private pageY;
    private touchStartY;
    private hasScrollBarX;
    private scrollBarThumbDownX;
    private isOverScrollUpX;
    private isOverScrollDownX;
    private isOverScollThumbX;
    private posXvalue;
    private scrollBarThumbMinX;
    private scrollBarThumbMaxX;
    private scrollBarPosMaxX;
    private pageX;
    private touchStartX;
    private lastmove;
    private scrollbarSize;
    private cellHeight;
    private run;
    private runXOrY;
    private runStart;
    private speed;
    private scrollViewConfig;
    constructor(context: CanvasContext2D, drawable: Drawable, config: ScrollViewConfig | undefined, askForExtentedMouseMoveAndMaouseUp: () => void, askForNormalMouseMoveAndMaouseUp: () => void);
    posY: number;
    posX: number;
    setSize(r: number, canvasWidth: number, canvasHeight: number, width?: number, height?: number): void;
    beforeDraw(): boolean;
    OnKeydown(keyCode: number): boolean;
    OnTouchStart(e: CanvasTableTouchEvent, offsetLeft: number, offsetTop: number): boolean;
    OnTouchMove(e: CanvasTableTouchEvent, offsetLeft: number, offsetTop: number): void;
    OnTouchEnd(e: CanvasTableTouchEvent): void;
    onScroll: (deltaMode: number, deltaX: number, deltaY: number) => void;
    onMouseLeave(): void;
    onExtendedMouseUp(x: number, y: number): boolean;
    onExtendedMouseMove(x: number, y: number): boolean;
    onMouseDown(x: number, y: number): boolean;
    onMouseMove(x: number, y: number): boolean;
    onMouseUp(x: number, y: number): boolean;
    private scrollClick;
    private drawMe;
    draw(): void;
    private fixPos;
}
